classDiagram
    %% Domain Classes
    class User {
      +int id
      +string name
      +string email
      +string password
      +Role role
      +login()
      +register()
    }

    class Profile {
      +int id
      +int userId
      +string phone
      +string address
      +updateProfile()
    }

    class CoworkingSpace {
      +int id
      +string name
      +string location
      +string description
      +double pricePerHour
      +availability
      +getDetails()
    }

    class Booking {
      +int id
      +int userId
      +int spaceId
      +Date bookingDate
      +BookingStatus status
      +bookSpace()
    }

    class Payment {
      +int id
      +int bookingId
      +double amount
      +string paymentMethod
      +PaymentStatus status
      +makePayment()
    }

    %% Repository Classes (data layer)
    class UserRepository {
      +findById(id)
      +save(user)
      +delete(user)
    }

    class SpaceRepository {
      +findById(id)
      +findAll()
      +save(space)
      +delete(space)
    }

    class BookingRepository {
      +findById(id)
      +save(booking)
      +delete(booking)
    }

    class PaymentRepository {
      +findById(id)
      +save(payment)
      +delete(payment)
    }

    %% Service Classes (business logic layer)
    class BookingService {
      +bookSpace(user, space)
      +cancelBooking(booking)
    }

    class PaymentService {
      +processPayment(booking, paymentMethod)
      +refundPayment(booking)
    }

    %% Relationships among Domain Entities
    User "1" --> "1" Profile : has
    User "1" --> "*" Booking : makes
    CoworkingSpace "1" --> "*" Booking : reserved by
    Booking "1" --> "1" Payment : triggers

    %% Dependencies between Services and Repositories
    BookingService ..> BookingRepository : uses
    PaymentService ..> PaymentRepository : uses
